// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capture.proto

package capture

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//请求
type CapRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapRequest) Reset()         { *m = CapRequest{} }
func (m *CapRequest) String() string { return proto.CompactTextString(m) }
func (*CapRequest) ProtoMessage()    {}
func (*CapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9783ea736227746, []int{0}
}

func (m *CapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapRequest.Unmarshal(m, b)
}
func (m *CapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapRequest.Marshal(b, m, deterministic)
}
func (m *CapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapRequest.Merge(m, src)
}
func (m *CapRequest) XXX_Size() int {
	return xxx_messageInfo_CapRequest.Size(m)
}
func (m *CapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CapRequest proto.InternalMessageInfo

//响应
type CapResponse struct {
	Fpath                string   `protobuf:"bytes,1,opt,name=fpath,proto3" json:"fpath,omitempty"`
	Bpath                string   `protobuf:"bytes,2,opt,name=bpath,proto3" json:"bpath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapResponse) Reset()         { *m = CapResponse{} }
func (m *CapResponse) String() string { return proto.CompactTextString(m) }
func (*CapResponse) ProtoMessage()    {}
func (*CapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9783ea736227746, []int{1}
}

func (m *CapResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapResponse.Unmarshal(m, b)
}
func (m *CapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapResponse.Marshal(b, m, deterministic)
}
func (m *CapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapResponse.Merge(m, src)
}
func (m *CapResponse) XXX_Size() int {
	return xxx_messageInfo_CapResponse.Size(m)
}
func (m *CapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CapResponse proto.InternalMessageInfo

func (m *CapResponse) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

func (m *CapResponse) GetBpath() string {
	if m != nil {
		return m.Bpath
	}
	return ""
}

func init() {
	proto.RegisterType((*CapRequest)(nil), "CapRequest")
	proto.RegisterType((*CapResponse)(nil), "CapResponse")
}

func init() { proto.RegisterFile("capture.proto", fileDescriptor_d9783ea736227746) }

var fileDescriptor_d9783ea736227746 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4e, 0x2c, 0x28,
	0x29, 0x2d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xe2, 0xe1, 0xe2, 0x72, 0x4e, 0x2c,
	0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0xb2, 0xe4, 0xe2, 0x06, 0xf3, 0x8a, 0x0b, 0xf2,
	0xf3, 0x8a, 0x53, 0x85, 0x44, 0xb8, 0x58, 0xd3, 0x0a, 0x12, 0x4b, 0x32, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x20, 0x1c, 0x90, 0x68, 0x12, 0x58, 0x94, 0x09, 0x22, 0x0a, 0xe6, 0x18, 0x39,
	0x71, 0x09, 0x3a, 0x43, 0x4c, 0xf6, 0xc9, 0x4c, 0x0e, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15,
	0xd2, 0xe5, 0xe2, 0x73, 0x4e, 0x2c, 0xf0, 0xc9, 0x4c, 0x4e, 0xcd, 0x2b, 0x4e, 0xf5, 0xcc, 0x4b,
	0xcb, 0x17, 0xe2, 0xd6, 0x43, 0x58, 0x27, 0xc5, 0xa3, 0x87, 0x64, 0x9b, 0x12, 0x43, 0x12, 0x1b,
	0xd8, 0x4d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0xf9, 0x8e, 0xb5, 0xa4, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CaptureLicServiceClient is the client API for CaptureLicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CaptureLicServiceClient interface {
	CapLicenseInfo(ctx context.Context, in *CapRequest, opts ...grpc.CallOption) (*CapResponse, error)
}

type captureLicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptureLicServiceClient(cc grpc.ClientConnInterface) CaptureLicServiceClient {
	return &captureLicServiceClient{cc}
}

func (c *captureLicServiceClient) CapLicenseInfo(ctx context.Context, in *CapRequest, opts ...grpc.CallOption) (*CapResponse, error) {
	out := new(CapResponse)
	err := c.cc.Invoke(ctx, "/CaptureLicService/CapLicenseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptureLicServiceServer is the server API for CaptureLicService service.
type CaptureLicServiceServer interface {
	CapLicenseInfo(context.Context, *CapRequest) (*CapResponse, error)
}

// UnimplementedCaptureLicServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCaptureLicServiceServer struct {
}

func (*UnimplementedCaptureLicServiceServer) CapLicenseInfo(ctx context.Context, req *CapRequest) (*CapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapLicenseInfo not implemented")
}

func RegisterCaptureLicServiceServer(s *grpc.Server, srv CaptureLicServiceServer) {
	s.RegisterService(&_CaptureLicService_serviceDesc, srv)
}

func _CaptureLicService_CapLicenseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureLicServiceServer).CapLicenseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CaptureLicService/CapLicenseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureLicServiceServer).CapLicenseInfo(ctx, req.(*CapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CaptureLicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CaptureLicService",
	HandlerType: (*CaptureLicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CapLicenseInfo",
			Handler:    _CaptureLicService_CapLicenseInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "capture.proto",
}
